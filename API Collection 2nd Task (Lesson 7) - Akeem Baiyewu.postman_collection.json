{
	"info": {
		"_postman_id": "1d1178b8-959c-4a45-a8f2-bcae6ed2fd63",
		"name": "API Collection 2nd Task (Lesson 7) - Akeem Baiyewu",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24186853"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/todo",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register an API Client Copy",
			"item": [
				{
					"name": "Register an API Client - Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Status code name has string Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"clientName\": \"Princess\",\n   \"clientEmail\": \"princess4@mailinator.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/api-clients/",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData) //All Data inside Body Response\r",
									"console.log(jsonData.apiVersion) //Print Value of only apiVersion\r",
									"console.log(jsonData.title)      //Print Value of only title\r",
									"console.log(jsonData.paymentCurrency)  //Print value of only PaymentCurrency\r",
									"console.log(jsonData.categories[0])\r",
									"console.log(jsonData.categories[1])\r",
									"console.log(jsonData.categories[2])\r",
									"console.log(jsonData.categories[3])\r",
									"console.log(jsonData.categories[4])\r",
									"console.log(jsonData.scopes[0])\r",
									"console.log(jsonData.apps.developer)\r",
									"console.log(jsonData.apps.documentation)\r",
									"console.log(jsonData.apps.fusio)\r",
									"//console.log(jsonData.apps.swagger-ui)\r",
									"console.log(jsonData.links[0].rel)\r",
									"console.log(jsonData.links[0].href)\r",
									"console.log(jsonData.links[1].rel)\r",
									"console.log(jsonData.links[1].href)\r",
									"console.log(jsonData.links[2].rel)\r",
									"console.log(jsonData.links[2].href)\r",
									"console.log(jsonData.links[3].rel)\r",
									"console.log(jsonData.links[3].href)\r",
									"console.log(jsonData.links[4].rel)\r",
									"console.log(jsonData.links[4].href)\r",
									"console.log(jsonData.links[5].rel)\r",
									"console.log(jsonData.links[5].href)\r",
									"console.log(jsonData.links[6].rel)\r",
									"console.log(jsonData.links[6].href)\r",
									"console.log(jsonData.links[7].rel)\r",
									"console.log(jsonData.links[7].href)\r",
									"console.log(jsonData.links[8].rel)\r",
									"console.log(jsonData.links[8].href)\r",
									"\r",
									"pm.test(\"Confirm that the Apiversion should be 6.3.8.0\", function () {\r",
									"        pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the title should be Fusio\", function () {\r",
									"        pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Payment Currency should be EUR\", function () {\r",
									"        pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Categories should contain authorization\", function () {\r",
									"        pm.expect(jsonData.categories[0]).to.eql(\"authorization\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Categories should contain system\", function () {\r",
									"        pm.expect(jsonData.categories[1]).to.eql(\"system\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Categories should contain consumer\", function () {\r",
									"        pm.expect(jsonData.categories[2]).to.eql(\"consumer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Categories should contain backend\", function () {\r",
									"        pm.expect(jsonData.categories[3]).to.eql(\"backend\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Categories should contain default\", function () {\r",
									"        pm.expect(jsonData.categories[4]).to.eql(\"default\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the scopes should contain default\", function () {\r",
									"        pm.expect(jsonData.scopes[0]).to.eql(\"default\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that apps should contain https://demo.fusio-project.org/apps/developer\", function () {\r",
									"        pm.expect(jsonData.apps.developer).to.eql(\"https://demo.fusio-project.org/apps/developer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that documentation should contain https://demo.fusio-project.org/apps/documentation\", function () {\r",
									"        pm.expect(jsonData.apps.documentation).to.eql(\"https://demo.fusio-project.org/apps/documentation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that fusio should contain https://demo.fusio-project.org/apps/fusio\", function () {\r",
									"        pm.expect(jsonData.apps.fusio).to.eql(\"https://demo.fusio-project.org/apps/fusio\");\r",
									"});\r",
									"\r",
									"//pm.test(\"Confirm that apps should contain https://demo.fusio-project.org/apps/developer\", function () {\r",
									" //       pm.expect(jsonData.apps.developer).to.eql(\"https://demo.fusio-project.org/apps/developer\");\r",
									"//});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain root\", function () {\r",
									"        pm.expect(jsonData.links[0].rel).to.eql(\"root\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/\", function () {\r",
									"        pm.expect(jsonData.links[0].href).to.eql(\"https://demo.fusio-project.org/\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain openapi\", function () {\r",
									"        pm.expect(jsonData.links[1].rel).to.eql(\"openapi\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/system/export/openapi/*/*/\", function () {\r",
									"        pm.expect(jsonData.links[1].href).to.eql(\"https://demo.fusio-project.org/system/export/openapi/*/*\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain documentation\", function () {\r",
									"        pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/system/doc\", function () {\r",
									"        pm.expect(jsonData.links[2].href).to.eql(\"https://demo.fusio-project.org/system/doc\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain route\", function () {\r",
									"        pm.expect(jsonData.links[3].rel).to.eql(\"route\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/system/route\", function () {\r",
									"        pm.expect(jsonData.links[3].href).to.eql(\"https://demo.fusio-project.org/system/route\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain health\", function () {\r",
									"        pm.expect(jsonData.links[4].rel).to.eql(\"health\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/system/health\", function () {\r",
									"        pm.expect(jsonData.links[4].href).to.eql(\"https://demo.fusio-project.org/system/health\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain jsonrpc\", function () {\r",
									"        pm.expect(jsonData.links[5].rel).to.eql(\"jsonrpc\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/system/jsonrpc\", function () {\r",
									"        pm.expect(jsonData.links[5].href).to.eql(\"https://demo.fusio-project.org/system/jsonrpc\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain oauth2\", function () {\r",
									"        pm.expect(jsonData.links[6].rel).to.eql(\"oauth2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/authorization/token\", function () {\r",
									"        pm.expect(jsonData.links[6].href).to.eql(\"https://demo.fusio-project.org/authorization/token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain whoami\", function () {\r",
									"        pm.expect(jsonData.links[7].rel).to.eql(\"whoami\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/authorization/whoami\", function () {\r",
									"        pm.expect(jsonData.links[7].href).to.eql(\"https://demo.fusio-project.org/authorization/whoami\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that rel under links should contain about\", function () {\r",
									"        pm.expect(jsonData.links[8].rel).to.eql(\"about\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://www.fusio-project.org\", function () {\r",
									"        pm.expect(jsonData.links[8].href).to.eql(\"https://www.fusio-project.org\");\r",
									"});\r",
									"\r",
									"\r",
									"/** \r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								""
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/todo/?todo_id=2",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "2"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"//console.log(\"The Midnight Library\")\r",
									"//console.log(6)\r",
									"console.log(jsonData[0].id)\r",
									"console.log(jsonData[0].name)\r",
									"console.log(jsonData[0].type)\r",
									"console.log(jsonData[0].available)\r",
									"console.log(jsonData[1].id)\r",
									"console.log(jsonData[1].name)\r",
									"console.log(jsonData[1].type)\r",
									"console.log(jsonData[1].available)\r",
									"console.log(jsonData[2].id)\r",
									"console.log(jsonData[2].name)\r",
									"console.log(jsonData[2].type)\r",
									"console.log(jsonData[2].available)\r",
									"console.log(jsonData[3].id)\r",
									"console.log(jsonData[3].name)\r",
									"console.log(jsonData[3].type)\r",
									"console.log(jsonData[3].available)\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that ID has a value of 1 under 0\", function () {\r",
									"        pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the name of the Book is The Russian under 0\", function () {\r",
									"        pm.expect(jsonData[0].name).to.eql(\"The Russian\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the type of the Book is Fiction under 0\", function () {\r",
									"        pm.expect(jsonData[0].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\"Confirm that the Book being available is True under 0\", function () {\r",
									"        pm.expect(jsonData[0].available).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that ID has a value of 3 under 1\", function () {\r",
									"        pm.expect(jsonData[1].id).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the name of the Book is The Vanishing Half under 1\", function () {\r",
									"        pm.expect(jsonData[1].name).to.eql(\"The Vanishing Half\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the type of the Book is Fiction under 1\", function () {\r",
									"        pm.expect(jsonData[1].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\"Confirm that the Book being available is True under 1\", function () {\r",
									"        pm.expect(jsonData[1].available).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that ID has a value of 4 under 2\", function () {\r",
									"        pm.expect(jsonData[2].id).to.eql(4);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the name of the Book is The The Midnight Library under 2\", function () {\r",
									"        pm.expect(jsonData[2].name).to.eql(\"The Midnight Library\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the type of the Book is Fiction under 2\", function () {\r",
									"        pm.expect(jsonData[2].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\"Confirm that the Book being available is True under 2\", function () {\r",
									"        pm.expect(jsonData[2].available).to.eql(true);\r",
									"});\r",
									"pm.test(\"Confirm that ID has a value of 6 under 3\", function () {\r",
									"        pm.expect(jsonData[3].id).to.eql(6);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the name of the Book is Viscount Who Loved Me under 3\", function () {\r",
									"        pm.expect(jsonData[3].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the type of the Book is Fiction under 3\", function () {\r",
									"        pm.expect(jsonData[3].type).to.eql(\"fiction\");\r",
									"});\r",
									"pm.test(\"Confirm that the Book being available is True under 3\", function () {\r",
									"        pm.expect(jsonData[3].available).to.eql(true);\r",
									"});\r",
									"\r",
									"//console.log(jsonData[0])\r",
									"\r",
									"/** \r",
									"pm.test(\"Confirm that rel under links should contain root\", function () {\r",
									"        pm.expect(jsonData.links[0].rel).to.eql(\"root\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that href under links should contain https://demo.fusio-project.org/\", function () {\r",
									"        pm.expect(jsonData.links[0].href).to.eql(\"https://demo.fusio-project.org/\");\r",
									"});\r",
									"*/\r",
									"\r",
									"//const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"//console.log(response[2].name);\r",
									"//pm.test(\"A book called Viscount Who Loved Me should be dsiplayed\", function (){\r",
									" //   pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"//});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"//const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"//console.log(Fiction[0].id);\r",
									"\r",
									"//pm.test(\"The id number of the fiction book that available with the name The Midnight Library should be displayed\" , function () {\r",
									"  //  pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"//});\r",
									"\r",
									"//pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"//pm.test(\"Status code name should have a OK string\", function () {\r",
									" //   pm.response.to.have.status(\"OK\");\r",
									"//});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?type=fiction",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have a Created string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.created)\r",
									"console.log(jsonData.orderId)\r",
									"\r",
									"pm.test(\"Confirm that created has a value of True\", function () {\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"/** \r",
									"pm.test(\"Confirm that Order ID has a value of 64CrvK6wf6g6NMbYDE-H1\", function () {\r",
									"    pm.expect(jsonData.orderId).to.eql(\"64CrvK6wf6g6NMbYDE-H1\");\r",
									"}); */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "67a642d965b6ca80c2bb34398535f10ffa7e10b119b0556735b9bc7d91ec4f4f",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData[0].id)\r",
									"console.log(jsonData[0].bookId)\r",
									"console.log(jsonData[0].customerName)\r",
									"console.log(jsonData[0].createdBy)\r",
									"console.log(jsonData[0].quantity)\r",
									"console.log(jsonData[0].timestamp)\r",
									"console.log(jsonData[1].id)\r",
									"console.log(jsonData[1].bookId)\r",
									"console.log(jsonData[1].customerName)\r",
									"console.log(jsonData[1].createdBy)\r",
									"console.log(jsonData[1].quantity)\r",
									"console.log(jsonData[1].timestamp)\r",
									"console.log(jsonData[2].id)\r",
									"console.log(jsonData[2].bookId)\r",
									"console.log(jsonData[2].customerName)\r",
									"console.log(jsonData[2].createdBy)\r",
									"console.log(jsonData[2].quantity)\r",
									"console.log(jsonData[2].timestamp)\r",
									"console.log(jsonData[3].id)\r",
									"console.log(jsonData[3].bookId)\r",
									"console.log(jsonData[3].customerName)\r",
									"console.log(jsonData[3].createdBy)\r",
									"console.log(jsonData[3].quantity)\r",
									"console.log(jsonData[3].timestamp)\r",
									"console.log(jsonData[4].id)\r",
									"console.log(jsonData[4].bookId)\r",
									"console.log(jsonData[4].customerName)\r",
									"console.log(jsonData[4].createdBy)\r",
									"console.log(jsonData[4].quantity)\r",
									"console.log(jsonData[4].timestamp)\r",
									"console.log(jsonData[5].id)\r",
									"console.log(jsonData[5].bookId)\r",
									"console.log(jsonData[5].customerName)\r",
									"console.log(jsonData[5].createdBy)\r",
									"console.log(jsonData[5].quantity)\r",
									"console.log(jsonData[5].timestamp)\r",
									"console.log(jsonData[6].id)\r",
									"console.log(jsonData[6].bookId)\r",
									"console.log(jsonData[6].customerName)\r",
									"console.log(jsonData[6].createdBy)\r",
									"console.log(jsonData[6].quantity)\r",
									"console.log(jsonData[6].timestamp)\r",
									"console.log(jsonData[7].id)\r",
									"console.log(jsonData[7].bookId)\r",
									"console.log(jsonData[7].customerName)\r",
									"console.log(jsonData[7].createdBy)\r",
									"console.log(jsonData[7].quantity)\r",
									"console.log(jsonData[7].timestamp)\r",
									"console.log(jsonData[8].id)\r",
									"console.log(jsonData[8].bookId)\r",
									"console.log(jsonData[8].customerName)\r",
									"console.log(jsonData[8].createdBy)\r",
									"console.log(jsonData[8].quantity)\r",
									"console.log(jsonData[8].timestamp)\r",
									"console.log(jsonData[9].id)\r",
									"console.log(jsonData[9].bookId)\r",
									"console.log(jsonData[9].customerName)\r",
									"console.log(jsonData[9].createdBy)\r",
									"console.log(jsonData[9].quantity)\r",
									"console.log(jsonData[9].timestamp)\r",
									"console.log(jsonData[10].id)\r",
									"console.log(jsonData[10].bookId)\r",
									"console.log(jsonData[10].customerName)\r",
									"console.log(jsonData[10].createdBy)\r",
									"console.log(jsonData[10].quantity)\r",
									"console.log(jsonData[10].timestamp)\r",
									"console.log(jsonData[11].id)\r",
									"console.log(jsonData[11].bookId)\r",
									"console.log(jsonData[11].customerName)\r",
									"console.log(jsonData[11].createdBy)\r",
									"console.log(jsonData[11].quantity)\r",
									"console.log(jsonData[11].timestamp)\r",
									"console.log(jsonData[12].id)\r",
									"console.log(jsonData[12].bookId)\r",
									"console.log(jsonData[12].customerName)\r",
									"console.log(jsonData[12].createdBy)\r",
									"console.log(jsonData[12].quantity)\r",
									"console.log(jsonData[12].timestamp)\r",
									"console.log(jsonData[13].id)\r",
									"console.log(jsonData[13].bookId)\r",
									"console.log(jsonData[13].customerName)\r",
									"console.log(jsonData[13].createdBy)\r",
									"console.log(jsonData[13].quantity)\r",
									"console.log(jsonData[13].timestamp)\r",
									"console.log(jsonData[14].id)\r",
									"console.log(jsonData[14].bookId)\r",
									"console.log(jsonData[14].customerName)\r",
									"console.log(jsonData[14].createdBy)\r",
									"console.log(jsonData[14].quantity)\r",
									"console.log(jsonData[14].timestamp)\r",
									"console.log(jsonData[15].id)\r",
									"console.log(jsonData[15].bookId)\r",
									"console.log(jsonData[15].customerName)\r",
									"console.log(jsonData[15].createdBy)\r",
									"console.log(jsonData[15].quantity)\r",
									"console.log(jsonData[15].timestamp)\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that ID is WEL8XrBhGZviDbhwG7jQf under 0\", function () {\r",
									"        pm.expect(jsonData[0].id).to.eql(\"WEL8XrBhGZviDbhwG7jQf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Book ID is 1 under 0\", function () {\r",
									"        pm.expect(jsonData[0].bookId).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that Customer Name is John under 0\", function () {\r",
									"        pm.expect(jsonData[0].customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order was created by bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828 under 0\", function () {\r",
									"        pm.expect(jsonData[0].createdBy).to.eql(\"bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order quantity is 1 under 0\", function () {\r",
									"        pm.expect(jsonData[0].quantity).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the timestamp is 1668627850424 under 0\", function () {\r",
									"        pm.expect(jsonData[0].timestamp).to.eql(1668627850424);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that ID is JKowCTjruO_5BB-PsEZUi under 1\", function () {\r",
									"        pm.expect(jsonData[1].id).to.eql(\"JKowCTjruO_5BB-PsEZUi\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Book ID is 1 under 1\", function () {\r",
									"        pm.expect(jsonData[1].bookId).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that Customer Name is John under 1\", function () {\r",
									"        pm.expect(jsonData[1].customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order was created by bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828 under 1\", function () {\r",
									"        pm.expect(jsonData[1].createdBy).to.eql(\"bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order quantity is 1 under 1\", function () {\r",
									"        pm.expect(jsonData[1].quantity).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the timestamp is 1668627870335 under 1\", function () {\r",
									"        pm.expect(jsonData[1].timestamp).to.eql(1668627870335);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that ID is TfclUMrnmz0e0dmV4_FxD under 2\", function () {\r",
									"        pm.expect(jsonData[2].id).to.eql(\"TfclUMrnmz0e0dmV4_FxD\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Book ID is 1 under 2\", function () {\r",
									"        pm.expect(jsonData[2].bookId).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that Customer Name is John under 2\", function () {\r",
									"        pm.expect(jsonData[2].customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order was created by bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828 under 2\", function () {\r",
									"        pm.expect(jsonData[2].createdBy).to.eql(\"bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the order quantity is 1 under 2\", function () {\r",
									"        pm.expect(jsonData[2].quantity).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the timestamp is 1668627870335 under 2\", function () {\r",
									"        pm.expect(jsonData[2].timestamp).to.eql(1668629984823);\r",
									"});\r",
									"\r",
									"\r",
									"/** \r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "67a642d965b6ca80c2bb34398535f10ffa7e10b119b0556735b9bc7d91ec4f4f",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.bookId)\r",
									"console.log(jsonData.createdBy)\r",
									"console.log(jsonData.quantity)\r",
									"console.log(jsonData.timestamp)\r",
									"\r",
									"pm.test(\"Confirm that the Order ID is WEL8XrBhGZviDbhwG7jQf\", function () {\r",
									"        pm.expect(jsonData.id).to.eql(\"WEL8XrBhGZviDbhwG7jQf\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Book ID is 1\", function () {\r",
									"        pm.expect(jsonData.bookId).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Customer Name is John\", function () {\r",
									"        pm.expect(jsonData.customerName).to.eql(\"John\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the created by is bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828\", function () {\r",
									"        pm.expect(jsonData.createdBy).to.eql(\"bfb7ea7207b6ea8649df71aac6363ecedce08f77802d1b163f30ba412c2df828\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that Order quantity is 1\", function () {\r",
									"        pm.expect(jsonData.quantity).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm that the Time Stamp is 1668627850424\", function () {\r",
									"        pm.expect(jsonData.timestamp).to.eql(1668627850424);\r",
									"});\r",
									"\r",
									"/**pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"}); */"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "67a642d965b6ca80c2bb34398535f10ffa7e10b119b0556735b9bc7d91ec4f4f",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/:orderId",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "WEL8XrBhGZviDbhwG7jQf"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string OK\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-books-api.glitch.me/orders/:orderId",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "bl8ZbxUCq59bH8DyYWvjo"
						}
					]
				}
			},
			"response": []
		}
	]
}